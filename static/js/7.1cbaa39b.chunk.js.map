{"version":3,"sources":["components/sidebar/index.js","components/exportXls/index.js","components/exportPdf/index.js","actions/index.js","components/user/index.js"],"names":["drawerWidth","useStyles","makeStyles","theme","root","display","marginBottom","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","width","enteringScreen","menuButton","marginRight","hide","flexShrink","whiteSpace","drawerOpen","drawerClose","overflowX","spacing","breakpoints","up","toolbar","alignItems","justifyContent","padding","mixins","content","flexGrow","Navbar","setPresentPage","classes","useTheme","React","useState","open","setOpen","anchorEl","setAnchorEl","openAnchor","Boolean","dispatch","useDispatch","user","useSelector","state","logstate","handleClose","className","position","color","clsx","isAdmin","onClick","edge","variant","style","name","event","currentTarget","id","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","onClose","logout","paper","direction","map","text","index","button","primary","to","ExcelFile","ReactExport","ExcelSheet","ExcelColumn","ExportXls","dataList","data","element","margin","label","value","JSON","stringify","ExportPdf","MyDoc","size","wrap","render","pageNumber","totalPages","v","chart_label","chart_type","data_source","usePDF","document","instance","loading","error","href","url","download","login","type","payload","addUser","editUser","deleteUser","addData","editData","deleteData","User","chartRefs","useRef","chartDraw","details","a","Chart","current","getContext","labels","datasets","backgroundColor","borderColor","borderWidth","options","scales","yAxes","ticks","beginAtZero","useEffect","forEach","i","ref","el"],"mappings":"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","file":"static/js/7.1cbaa39b.chunk.js","sourcesContent":["import React from 'react'\r\nimport clsx from 'clsx'\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles'\r\nimport Drawer from '@material-ui/core/Drawer'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport List from '@material-ui/core/List'\r\nimport CssBaseline from '@material-ui/core/CssBaseline'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport MenuIcon from '@material-ui/icons/Menu'\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft'\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight'\r\nimport HomeIcon from '@material-ui/icons/Home'\r\nimport VerifiedUserIcon from '@material-ui/icons/VerifiedUser'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\nimport AccountCircle from '@material-ui/icons/AccountCircle'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport Menu from '@material-ui/core/Menu'\r\nimport { logout } from '../../actions'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nconst drawerWidth = 240\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        marginBottom: '64px',\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        marginLeft: drawerWidth,\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    menuButton: {\r\n        marginRight: 36,\r\n    },\r\n    hide: {\r\n        display: 'none',\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n        whiteSpace: 'nowrap',\r\n    },\r\n    drawerOpen: {\r\n        width: drawerWidth,\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    drawerClose: {\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        overflowX: 'hidden',\r\n        width: theme.spacing(7) + 1,\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: theme.spacing(9) + 1,\r\n        },\r\n    },\r\n    toolbar: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-end',\r\n        padding: theme.spacing(0, 1),\r\n        // necessary for content to be below app bar\r\n        ...theme.mixins.toolbar,\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n    },\r\n}))\r\n\r\nexport default function Navbar({ setPresentPage }) {\r\n    const classes = useStyles()\r\n    const theme = useTheme()\r\n    const [open, setOpen] = React.useState(false)\r\n\r\n    const handleDrawerOpen = () => {\r\n        setOpen(true)\r\n    }\r\n\r\n    const handleDrawerClose = () => {\r\n        setOpen(false)\r\n    }\r\n\r\n    const [anchorEl, setAnchorEl] = React.useState(null)\r\n    const openAnchor = Boolean(anchorEl)\r\n\r\n    const dispatch = useDispatch()\r\n    const user = useSelector((state) => state.logstate)\r\n\r\n    const handleMenu = (event) => {\r\n        setAnchorEl(event.currentTarget)\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {user !== null ? (\r\n                <div className={classes.root}>\r\n                    <CssBaseline />\r\n                    <AppBar\r\n                        position=\"fixed\"\r\n                        color=\"secondary\"\r\n                        className={clsx(classes.appBar, {\r\n                            [classes.appBarShift]: open,\r\n                        })}\r\n                    >\r\n                        <Toolbar>\r\n                            {user.isAdmin && (\r\n                                <IconButton\r\n                                    color=\"inherit\"\r\n                                    aria-label=\"open drawer\"\r\n                                    onClick={handleDrawerOpen}\r\n                                    edge=\"start\"\r\n                                    className={clsx(classes.menuButton, {\r\n                                        [classes.hide]: open,\r\n                                    })}\r\n                                >\r\n                                    <MenuIcon />\r\n                                </IconButton>\r\n                            )}\r\n                            <Typography variant=\"h6\" style={{ flexGrow: '1' }}>\r\n                                Hello {user.name}\r\n                            </Typography>\r\n                            <div>\r\n                                <IconButton\r\n                                    aria-label=\"account of current user\"\r\n                                    aria-controls=\"menu-appbar\"\r\n                                    aria-haspopup=\"true\"\r\n                                    onClick={handleMenu}\r\n                                    color=\"inherit\"\r\n                                >\r\n                                    <AccountCircle />\r\n                                </IconButton>\r\n                                <Menu\r\n                                    id=\"menu-appbar\"\r\n                                    anchorEl={anchorEl}\r\n                                    anchorOrigin={{\r\n                                        vertical: 'top',\r\n                                        horizontal: 'right',\r\n                                    }}\r\n                                    keepMounted\r\n                                    transformOrigin={{\r\n                                        vertical: 'top',\r\n                                        horizontal: 'right',\r\n                                    }}\r\n                                    open={openAnchor}\r\n                                    onClose={handleClose}\r\n                                >\r\n                                    <MenuItem onClick={handleClose}>\r\n                                        Profile\r\n                                    </MenuItem>\r\n                                    <MenuItem\r\n                                        onClick={() => dispatch(logout())}\r\n                                    >\r\n                                        Logout\r\n                                    </MenuItem>\r\n                                </Menu>\r\n                            </div>\r\n                        </Toolbar>\r\n                    </AppBar>\r\n                    {user.isAdmin && (\r\n                        <Drawer\r\n                            variant=\"permanent\"\r\n                            className={clsx(classes.drawer, {\r\n                                [classes.drawerOpen]: open,\r\n                                [classes.drawerClose]: !open,\r\n                            })}\r\n                            classes={{\r\n                                paper: clsx({\r\n                                    [classes.drawerOpen]: open,\r\n                                    [classes.drawerClose]: !open,\r\n                                }),\r\n                            }}\r\n                        >\r\n                            <div className={classes.toolbar}>\r\n                                <IconButton onClick={handleDrawerClose}>\r\n                                    {theme.direction === 'rtl' ? (\r\n                                        <ChevronRightIcon />\r\n                                    ) : (\r\n                                        <ChevronLeftIcon />\r\n                                    )}\r\n                                </IconButton>\r\n                            </div>\r\n                            <Divider />\r\n                            <List>\r\n                                {['Home', 'User Management'].map(\r\n                                    (text, index) => (\r\n                                        <ListItem\r\n                                            button\r\n                                            key={text}\r\n                                            onClick={() =>\r\n                                                index % 2 === 0\r\n                                                    ? setPresentPage('Home')\r\n                                                    : setPresentPage('uManage')\r\n                                            }\r\n                                        >\r\n                                            <ListItemIcon>\r\n                                                {index === 0 ? (\r\n                                                    <HomeIcon />\r\n                                                ) : (\r\n                                                    <VerifiedUserIcon />\r\n                                                )}\r\n                                            </ListItemIcon>\r\n                                            <ListItemText primary={text} />\r\n                                        </ListItem>\r\n                                    ),\r\n                                )}\r\n                            </List>\r\n                            <Divider />\r\n                        </Drawer>\r\n                    )}\r\n                </div>\r\n            ) : (\r\n                <Redirect to=\"/DD-User-management/\" />\r\n            )}\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport ReactExport from 'react-data-export'\r\nimport { useSelector } from 'react-redux'\r\n\r\nconst ExcelFile = ReactExport.ExcelFile\r\nconst ExcelSheet = ReactExport.ExcelFile.ExcelSheet\r\nconst ExcelColumn = ReactExport.ExcelFile.ExcelColumn\r\n\r\nconst ExportXls = () => {\r\n    const dataList = useSelector((state) => state.data)\r\n    return (\r\n        <ExcelFile\r\n            element={<button style={{ margin: '15px' }}>Export to Xlsx</button>}\r\n        >\r\n            <ExcelSheet data={dataList} name=\"Data\">\r\n                <ExcelColumn label=\"id\" value=\"id\" />\r\n                <ExcelColumn label=\"chart_label\" value=\"chart_label\" />\r\n                <ExcelColumn label=\"chart_type\" value=\"chart_type\" />\r\n                <ExcelColumn label=\"data_source\" value=\"data_source\" />\r\n                <ExcelColumn\r\n                    label=\"data\"\r\n                    value={(data) => JSON.stringify(data.data)}\r\n                />\r\n            </ExcelSheet>\r\n        </ExcelFile>\r\n    )\r\n}\r\n\r\nexport default ExportXls\r\n","import { usePDF, Document, Page, Text } from '@react-pdf/renderer'\r\nimport { useSelector } from 'react-redux'\r\n\r\nconst ExportPdf = () => {\r\n    const dataList = useSelector((state) => state.data)\r\n\r\n    const MyDoc = (\r\n        <Document>\r\n            <Page size=\"A4\" wrap={true}>\r\n                <Text\r\n                    render={({ pageNumber, totalPages }) =>\r\n                        `${dataList.map(\r\n                            (v) =>\r\n                                `ID : ${v.id}, chart_label : ${\r\n                                    v.chart_label\r\n                                }, chart_type : ${\r\n                                    v.chart_type\r\n                                }, data_source : ${\r\n                                    v.data_source\r\n                                }, data : ${JSON.stringify(v.data)}`,\r\n                        )}`\r\n                    }\r\n                    style={{\r\n                        color: 'black',\r\n                        margin: 30,\r\n                    }}\r\n                    wrap={true}\r\n                />\r\n            </Page>\r\n        </Document>\r\n    )\r\n\r\n    const [instance] = usePDF({ document: MyDoc })\r\n    if (instance.loading) return <div>Loading ...</div>\r\n\r\n    if (instance.error) return <div>Something went wrong: {instance.error}</div>\r\n\r\n    return (\r\n        <a href={instance.url} download=\"test.pdf\">\r\n            <button>Export to PDF</button>\r\n        </a>\r\n    )\r\n}\r\nexport default ExportPdf\r\n","export const login = (user) => {\r\n    return {\r\n        type: 'login',\r\n        payload: user,\r\n    }\r\n}\r\n\r\nexport const logout = () => {\r\n    return {\r\n        type: 'logout',\r\n    }\r\n}\r\n\r\nexport const addUser = (data) => {\r\n    return {\r\n        type: 'addUser',\r\n        payload: data,\r\n    }\r\n}\r\n\r\nexport const editUser = (data) => {\r\n    return {\r\n        type: 'editUser',\r\n        payload: data,\r\n    }\r\n}\r\n\r\nexport const deleteUser = (id) => {\r\n    return {\r\n        type: 'deleteUser',\r\n        payload: id,\r\n    }\r\n}\r\n\r\nexport const addData = (data) => {\r\n    return {\r\n        type: 'addData',\r\n        payload: data,\r\n    }\r\n}\r\n\r\nexport const editData = (data) => {\r\n    return {\r\n        type: 'editData',\r\n        payload: data,\r\n    }\r\n}\r\n\r\nexport const deleteData = (id) => {\r\n    return {\r\n        type: 'deleteData',\r\n        payload: id,\r\n    }\r\n}\r\n","import React from 'react'\r\nimport Navbar from '../sidebar'\r\nimport { Container } from '@material-ui/core'\r\nimport { useSelector } from 'react-redux'\r\nimport Chart from 'chart.js/auto'\r\nimport Xls from '../exportXls'\r\nimport Pdf from '../exportPdf'\r\nimport '../admin/index.scss'\r\n\r\nconst User = () => {\r\n    const dataList = useSelector((state) => state.data)\r\n    const chartRefs = React.useRef([])\r\n\r\n    const chartDraw = async (details) => {\r\n        new Chart(chartRefs.current[details.id].getContext('2d'), {\r\n            type: details.chart_type,\r\n            data: {\r\n                labels: [\r\n                    'January',\r\n                    'February',\r\n                    'March',\r\n                    'April',\r\n                    'May',\r\n                    'June',\r\n                    'July',\r\n                    'August',\r\n                    'September',\r\n                    'October',\r\n                    'November',\r\n                    'December',\r\n                ],\r\n                datasets: [\r\n                    {\r\n                        label: details.chart_label,\r\n                        data: details.data,\r\n                        backgroundColor: ['rgba(255, 99, 132, 0.2)'],\r\n                        borderColor: [\r\n                            'rgba(255, 99, 132, 1)',\r\n                            'rgba(54, 162, 235, 1)',\r\n                            'rgba(255, 206, 86, 1)',\r\n                            'rgba(75, 192, 192, 1)',\r\n                            'rgba(153, 102, 255, 1)',\r\n                            'rgba(255, 159, 64, 1)',\r\n                        ],\r\n                        borderWidth: 1,\r\n                    },\r\n                ],\r\n            },\r\n            options: {\r\n                scales: {\r\n                    yAxes: [\r\n                        {\r\n                            ticks: {\r\n                                beginAtZero: true,\r\n                            },\r\n                        },\r\n                    ],\r\n                },\r\n            },\r\n        })\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        dataList.forEach((element) => {\r\n            chartDraw(element)\r\n        })\r\n    }, [])\r\n    return (\r\n        <>\r\n            <Navbar />\r\n            <Container>\r\n                <div className=\"content\">\r\n                    {dataList.map((v, i) => (\r\n                        <div key={i} className=\"chart-holder\">\r\n                            <canvas\r\n                                ref={(el) => (chartRefs.current[v.id] = el)}\r\n                            />\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <Xls />\r\n                <Pdf />\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default User\r\n"],"sourceRoot":""}